{"version":3,"sources":["src/template-map.js","src/css-parse.js","src/apply-shim-utils.js","src/style-settings.js","src/common-regex.js","src/style-util.js","src/apply-shim.js","src/common-utils.js","src/document-wait.js","src/custom-style-interface.js","entrypoints/apply-shim.js"],"names":["templateMap","constructor","StyleNode","parse","text","replace","RX$$module$src$css_parse.comments","RX$$module$src$css_parse.port","parseCss","root","length","n","i","l","OPEN_BRACE","p","previous","push","CLOSE_BRACE","node","t","substring","trim","ss","_expandUnicodeEscapes","RX$$module$src$css_parse.multipleSpaces","lastIndexOf","s","indexOf","AT_START","MEDIA_START","types$$module$src$css_parse.MEDIA_RULE","match","RX$$module$src$css_parse.keyframesRule","types$$module$src$css_parse.KEYFRAMES_RULE","split","pop","VAR_START","types$$module$src$css_parse.MIXIN_RULE","types$$module$src$css_parse.STYLE_RULE","r$","r","code","repeat","stringify","preserveProperties","cssText","rules","RX$$module$src$css_parse.customProp","RX$$module$src$css_parse.mixinProp","RX$$module$src$css_parse.mixinApply","RX$$module$src$css_parse.varApply","STYLE_RULE","KEYFRAMES_RULE","MEDIA_RULE","MIXIN_RULE","comments","port","customProp","mixinProp","mixinApply","varApply","keyframesRule","multipleSpaces","promise","Promise","resolve","invalidate","elementName","template","templateIsValid","startValidatingTemplate","_validating","then","nativeShadow","window","nativeCssVariables","calcCssVariables","settings","navigator","userAgent","CSS","supports","ShadyCSS","undefined","nativeCss","module$src$style_settings.nativeCssVariables","VAR_ASSIGN","MIXIN_MATCH","MEDIA_MATCH","toCssText","rulesForStyle","style","textContent","forEachRule","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","type","matchMedia","matches","processVariableAndFallback","str","callback","start","level","inner","end","prefix","suffix","comma","value","fallback","APPLY_NAME_CLEAN","INITIAL_INHERIT","MixinMap","_map","set","name","props","properties","dependants","get","invalidCallback","ApplyShim","_measureElement","_currentElement","detectMixin","has","test","lastIndex","transformTemplate","content","querySelector","ast","transformStyle","transformRules","transformCustomStyle","rule","transformRule","transformCssText","matchText","propertyName","valueProperty","valueMixin","_produceCssProperties","_consumeCssProperties","m","exec","mixinName","idx","index","textBeforeApply","slice","textAfterApply","defaults","_cssTextToMap","_atApplyToCssProperties","vars","mixinEntry","f","fallbacks","parts","MIXIN_VAR_SEP","join","replacement","property","out","sp","_replaceInitialOrInherit","document","createElement","setAttribute","all","head","appendChild","getComputedStyle","getPropertyValue","_invalidateMixinEntry","mixinAsProperties","combinedProps","mixinValues","oldProps","Object","assign","create","needToInvalidate","v","prototype","defineProperty","cb","whenReady","readyPromise","requestAnimationFrame","readyState","addEventListener","documentWait","transformFn","validateFn","NODELIST_FOREACH","NodeList","forEach","CustomStyleInterface","observer","enqueueDocumentValidation","addCustomStyle","getStyleForCustomStyle","customStyle","processStyles","_mutationHandler","takeRecords","cs","styleToTransform","gatherMainDocumentStyles","styles","querySelectorAll","UNSCOPED_SELECTOR","watchMainDocumentStyles","MutationObserver","mxns","observe","childList","subtree","mxn","j","addedNodes","nodeType","Node","ELEMENT_NODE","localName","hasAttribute","nodeList","context","Array","from","defineProperties","fn","needsEnqueue","applyShim","ApplyShimInterface","customStyleInterface","ensure","flushCustomStyles","prepareTemplate","styleSubtree","element","removeProperty","setProperty","shadowRoot","styleElement","shadowChildren","children","childNodes","is","getAttribute","styleDocument","body","ScopingShim","applyShimInterface","getComputedStyleValue"],"mappings":"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","file":"apply-shim.min.js","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nexport const templateMap = {};","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n/** @unrestricted */\nexport class StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = node['parsedSelector'] = node['selector'] = t.trim();\n    node['atRule'] = (s.indexOf(AT_START) === 0);\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] =\n          node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r;\n      (i < l) && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r;\n        (i < l) && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties ? node['cssText'] :\n        removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText\n    .replace(RX.customProp, '')\n    .replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText\n    .replace(RX.mixinApply, '')\n    .replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000\n}\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g\n}\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport {templateMap} from './template-map.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\n/*\n * Utilities for handling invalidating apply-shim mixins for a given template.\n *\n * The invalidation strategy involves keeping track of the \"current\" version of a template's mixins, and updating that count when a mixin is invalidated.\n * The template\n */\n\n/** @const {string} */\nconst CURRENT_VERSION = '_applyShimCurrentVersion';\n\n/** @const {string} */\nconst NEXT_VERSION = '_applyShimNextVersion';\n\n/** @const {string} */\nconst VALIDATING_VERSION = '_applyShimValidatingVersion';\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nexport function invalidate(elementName){\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * This function can be called multiple times to mark a template invalid\n * and signal that the style inside must be regenerated.\n *\n * Use `startValidatingTemplate` to begin an asynchronous validation cycle.\n * During that cycle, call `templateIsValidating` to see if the template must\n * be revalidated\n * @param {HTMLTemplateElement} template\n */\nexport function invalidateTemplate(template) {\n  // default the current version to 0\n  template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;\n  // ensure the \"validating for\" flag exists\n  template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;\n  // increment the next version\n  template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValid(template) {\n  return template[CURRENT_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\n/**\n * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.\n * If false, the template must be validated.\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValidating(template) {\n  return !templateIsValid(template) && template[VALIDATING_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n*/\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\n/**\n * Begin an asynchronous invalidation cycle.\n * This should be called after every validation of a template\n *\n * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`\n * @param {HTMLTemplateElement} template\n */\nexport function startValidatingTemplate(template) {\n  // remember that the current \"next version\" is the reason for this validation cycle\n  template[VALIDATING_VERSION] = template[NEXT_VERSION];\n  // however, there only needs to be one async task to clear the counters\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function() {\n      // sync the current version to let future invalidations cause a refresh cycle\n      template[CURRENT_VERSION] = template[NEXT_VERSION];\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\nexport function elementsAreInvalid() {\n  for (let elementName in templateMap) {\n    let template = templateMap[elementName];\n    if (!templateIsValid(template)) {\n      return true;\n    }\n  }\n  return false;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport let nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\nexport let nativeCssVariables;\n\n/**\n * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings\n */\nfunction calcCssVariables(settings) {\n  if (settings && settings['shimcssproperties']) {\n    nativeCssVariables = false;\n  } else {\n    // chrome 49 has semi-working css vars, check if box-shadow works\n    // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\n    // However, shim css custom properties are only supported with ShadyDOM enabled,\n    // so fall back on native if we do not detect ShadyDOM\n    // Edge 15: custom properties used in ::before and ::after will also be used in the parent element\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/\n    nativeCssVariables = nativeShadow || Boolean(!navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/) &&\n      window.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n  }\n}\n\nif (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) {\n  nativeCssVariables = window.ShadyCSS.nativeCss;\n} else if (window.ShadyCSS) {\n  calcCssVariables(window.ShadyCSS);\n  // reset window variable to let ShadyCSS API take its place\n  window.ShadyCSS = undefined;\n} else {\n  calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']);\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi;\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nexport const MEDIA_MATCH = /@media\\s(.*)/;\nexport const IS_VAR = /^--/;\nexport const BRACKETED = /\\{[^}]*\\}/g;\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport {nativeShadow, nativeCssVariables} from './style-settings.js';\nimport {parse, stringify, types, StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\nimport {MEDIA_MATCH} from './common-regex.js';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n * @return {string}\n */\nexport function toCssText (rules, callback) {\n  if (!rules) {\n    return '';\n  }\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'] || null;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) &&\n  rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback &&\n    type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  applyStyle(style, target, contextNode);\n  return style;\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {HTMLStyleElement}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = /** @type {HTMLStyleElement} */(document.createElement('style'));\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/**\n * Track the position of the last added style for placing placeholders\n * @type {Node}\n */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {!Comment}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(' Shady DOM styles for ' +\n    moniker + ' ');\n  let after = lastHeadApplyNode ?\n    lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @param {?Node} target\n * @param {?Node} contextNode\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) ||\n    target.firstChild;\n  target.insertBefore(style, after);\n  if (!lastHeadApplyNode) {\n    lastHeadApplyNode = style;\n  } else {\n    // only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode\n    let position = style.compareDocumentPosition(lastHeadApplyNode);\n    if (position === Node.DOCUMENT_POSITION_PRECEDING) {\n      lastHeadApplyNode = style;\n    }\n  }\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * @param {Element} element\n * @return {?string}\n */\nexport function getCssBuildType(element) {\n  return element.getAttribute('css-build');\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nfunction findMatchingParen(text, start) {\n  let level = 0;\n  for (let i=start, l=text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (nativeShadow) {\n    element.setAttribute('class', value);\n  } else {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  }\n}\n\n/**\n * @param {Element | {is: string, extends: string}} element\n * @return {{is: string, typeExtension: string}}\n */\nexport function getIsExtends(element) {\n  let localName = element['localName'];\n  let is = '', typeExtension = '';\n  /*\n  NOTE: technically, this can be wrong for certain svg elements\n  with `-` in the name like `<font-face>`\n  */\n  if (localName) {\n    if (localName.indexOf('-') > -1) {\n      is = localName;\n    } else {\n      typeExtension = localName;\n      is = (element.getAttribute && element.getAttribute('is')) || '';\n    }\n  } else {\n    is = /** @type {?} */(element).is;\n    typeExtension = /** @type {?} */(element).extends;\n  }\n  return {is, typeExtension};\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    `@apply` --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\nimport {forEachRule, processVariableAndFallback, rulesForStyle, toCssText} from './style-util.js';\nimport {MIXIN_MATCH, VAR_ASSIGN} from './common-regex.js';\nimport {detectMixin} from './common-utils.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line no-unused-vars\n\nconst APPLY_NAME_CLEAN = /;\\s*/m;\nconst INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nconst MIXIN_VAR_SEP = '_-_';\n\n/**\n * @typedef {!Object<string, string>}\n */\nlet PropertyEntry; // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {!Object<string, boolean>}\n */\nlet DependantsEntry; // eslint-disable-line no-unused-vars\n\n/** @typedef {{\n *    properties: PropertyEntry,\n *    dependants: DependantsEntry\n * }}\n */\nlet MixinMapEntry; // eslint-disable-line no-unused-vars\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    /** @type {!Object<string, !MixinMapEntry>} */\n    this._map = {};\n  }\n  /**\n   * @param {string} name\n   * @param {!PropertyEntry} props\n   */\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {}\n    }\n  }\n  /**\n   * @param {string} name\n   * @return {MixinMapEntry}\n   */\n  get(name) {\n    name = name.trim();\n    return this._map[name] || null;\n  }\n}\n\n/**\n * Callback for when an element is marked invalid\n * @type {?function(string)}\n */\nlet invalidCallback = null;\n\n/** @unrestricted */\nexport class ApplyShim {\n  constructor() {\n    /** @type {?string} */\n    this._currentElement = null;\n    /** @type {HTMLMetaElement} */\n    this._measureElement = null;\n    this._map = new MixinMap();\n  }\n  /**\n   * return true if `cssText` contains a mixin definition or consumption\n   * @param {string} cssText\n   * @return {boolean}\n   */\n  detectMixin(cssText) {\n    return detectMixin(cssText);\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformTemplate(template, elementName) {\n    const style = /** @type {HTMLStyleElement} */(template.content.querySelector('style'));\n    /** @type {StyleNode} */\n    let ast = null;\n    if (style) {\n      ast = this.transformStyle(style, elementName);\n    }\n    return ast;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformStyle(style, elementName = '') {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @return {StyleNode}\n   */\n  transformCustomStyle(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (rule['selector'] === ':root') {\n        rule['selector'] = 'html';\n      }\n      this.transformRule(rule);\n    })\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {StyleNode} rules\n   * @param {string} elementName\n   */\n  transformRules(rules, elementName) {\n    this._currentElement = elementName;\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentElement = null;\n  }\n  /**\n   * @param {!StyleNode} rule\n   */\n  transformRule(rule) {\n    rule['cssText'] = this.transformCssText(rule['parsedCssText']);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule['selector'] === ':root') {\n      rule['selector'] = ':host > *';\n    }\n  }\n  /**\n   * @param {string} cssText\n   * @return {string}\n   */\n  transformCssText(cssText) {\n    // produce variables\n    cssText = cssText.replace(VAR_ASSIGN, (matchText, propertyName, valueProperty, valueMixin) =>\n      this._produceCssProperties(matchText, propertyName, valueProperty, valueMixin));\n    // consume mixins\n    return this._consumeCssProperties(cssText);\n  }\n  /**\n   * @param {string} property\n   * @return {string}\n   */\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = /** @type {HTMLMetaElement} */(document.createElement('meta'));\n      this._measureElement.setAttribute('apply-shim-measure', '');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n  }\n  /**\n   * replace mixin consumption with variable consumption\n   * @param {string} text\n   * @return {string}\n   */\n  _consumeCssProperties(text) {\n    /** @type {Array} */\n    let m = null;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = this._cssTextToMap(textBeforeApply);\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = `${textBeforeApply}${replacement}${textAfterApply}`;\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  /**\n   * produce variable consumption at the site of mixin consumption\n   * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n   * Example:\n   *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n   *\n   * @param {string} mixinName\n   * @param {Object} fallbacks\n   * @return {string}\n   */\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentElement) {\n        mixinEntry.dependants[this._currentElement] = true;\n      }\n      let p, parts, f;\n      for (p in mixinEntry.properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f);\n        }\n        parts.push(')');\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  /**\n   * @param {string} property\n   * @param {string} value\n   * @return {string}\n   */\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = this._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  /**\n   * \"parse\" a mixin definition into a map of properties and values\n   * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n   * @param {string} text\n   * @return {!Object<string, string>}\n   */\n  _cssTextToMap(text) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = this._replaceInitialOrInherit(property, sp.slice(1).join(':'));\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * @param {MixinMapEntry} mixinEntry\n   */\n  _invalidateMixinEntry(mixinEntry) {\n    if (!invalidCallback) {\n      return;\n    }\n    for (let elementName in mixinEntry.dependants) {\n      if (elementName !== this._currentElement) {\n        invalidCallback(elementName);\n      }\n    }\n  }\n\n  /**\n   * @param {string} matchText\n   * @param {string} propertyName\n   * @param {?string} valueProperty\n   * @param {?string} valueMixin\n   * @return {string}\n   */\n  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = `@apply ${value};`\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties(valueMixin);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    let mixinValues = this._cssTextToMap(mixinAsProperties);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = `${matchText};${prefix}`;\n    }\n    return `${prefix}${out.join('; ')};`;\n  }\n}\n\n/* exports */\nApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;\nApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;\nApplyShim.prototype['transformCustomStyle'] = ApplyShim.prototype.transformCustomStyle;\nApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;\nApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;\nApplyShim.prototype['transformTemplate'] = ApplyShim.prototype.transformTemplate;\nApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;\nObject.defineProperty(ApplyShim.prototype, 'invalidCallback', {\n  /** @return {?function(string)} */\n  get() {\n    return invalidCallback;\n  },\n  /** @param {?function(string)} cb */\n  set(cb) {\n    invalidCallback = cb;\n  }\n});","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { MIXIN_MATCH, VAR_ASSIGN } from './common-regex.js';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  /**\n   * @const {string}\n   */\n  const value = window.getComputedStyle(element).getPropertyValue(property);\n  if (!value) {\n    return '';\n  } else {\n    return value.trim();\n  }\n}\n\n/**\n * return true if `cssText` contains a mixin definition or consumption\n * @param {string} cssText\n * @return {boolean}\n */\nexport function detectMixin(cssText) {\n  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n  // reset state of the regexes\n  MIXIN_MATCH.lastIndex = 0;\n  VAR_ASSIGN.lastIndex = 0;\n  return has;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/** @type {?function(?function())} */\nlet whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;\n\n/** @const {Promise<void>} */\nconst readyPromise = new Promise((resolve) => {\n  requestAnimationFrame(() => {\n    if (whenReady) {\n      whenReady(resolve)\n    } else if (document.readyState === 'complete') {\n      resolve();\n    } else {\n      document.addEventListener('readystatechange', () => {\n        if (document.readyState === 'complete') {\n          resolve();\n        }\n      });\n    }\n  });\n});\n\n/**\n * @param {?function()} callback\n */\nexport function documentWait(callback) {\n  readyPromise.then(function(){ callback && callback(); });\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport {documentWait} from './document-wait.js';\n\n/**\n * @typedef {HTMLStyleElement | {getStyle: function():HTMLStyleElement}}\n */\nexport let CustomStyleProvider;\n\nconst SEEN_MARKER = '__seenByShadyCSS';\nconst CACHED_STYLE = '__shadyCSSCachedStyle';\n\nconst UNSCOPED_SELECTOR = 'style:not([scope])';\n\n/** @type {?function(!HTMLStyleElement)} */\nlet transformFn = null;\n\n/** @type {?function()} */\nlet validateFn = null;\n\nconst NODELIST_FOREACH = Boolean(NodeList.prototype.forEach);\n\n/**\n * @param {!NodeList} nodeList\n * @param {function(!HTMLStyleElement)} callback\n * @param {!CustomStyleInterface} context\n */\nfunction forEach(nodeList, callback, context) {\n  if (NODELIST_FOREACH) {\n    nodeList.forEach(callback, context);\n  } else {\n    Array.from(nodeList).forEach(callback, context);\n  }\n}\n\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\nexport class CustomStyleInterface {\n  constructor() {\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false;\n    /** @type {MutationObserver} */\n    this.observer = null;\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n  enqueueDocumentValidation() {\n    if (this['enqueued'] || !validateFn) {\n      return;\n    }\n    this['enqueued'] = true;\n    documentWait(validateFn);\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   */\n  addCustomStyle(style) {\n    if (!style[SEEN_MARKER]) {\n      style[SEEN_MARKER] = true;\n      this['customStyles'].push(style);\n      this.enqueueDocumentValidation();\n    }\n  }\n  /**\n   * @param {!CustomStyleProvider} customStyle\n   * @return {HTMLStyleElement}\n   */\n  getStyleForCustomStyle(customStyle) {\n    if (customStyle[CACHED_STYLE]) {\n      return customStyle[CACHED_STYLE];\n    }\n    let style;\n    if (customStyle['getStyle']) {\n      style = customStyle['getStyle']();\n    } else {\n      style = customStyle;\n    }\n    return style;\n  }\n  /**\n   * @return {!Array<!CustomStyleProvider>}\n   */\n  processStyles() {\n    if (this.observer) {\n      this._mutationHandler(this.observer.takeRecords());\n    }\n    const cs = this['customStyles'];\n    for (let i = 0; i < cs.length; i++) {\n      const customStyle = cs[i];\n      if (customStyle[CACHED_STYLE]) {\n        continue;\n      }\n      const style = this.getStyleForCustomStyle(customStyle);\n      if (style) {\n        // HTMLImports polyfill may have cloned the style into the main document,\n        // which is referenced with __appliedElement.\n        const styleToTransform = /** @type {!HTMLStyleElement} */(style['__appliedElement'] || style);\n        if (transformFn) {\n          transformFn(styleToTransform);\n        }\n        customStyle[CACHED_STYLE] = styleToTransform;\n      }\n    }\n    return cs;\n  }\n  gatherMainDocumentStyles() {\n    const styles = document.querySelectorAll(UNSCOPED_SELECTOR);\n    for (let i = 0; i < styles.length; i++) {\n      const s = /** @type {!HTMLStyleElement} */(styles[i]);\n      this.addCustomStyle(s);\n    }\n  }\n  watchMainDocumentStyles() {\n    if (this.observer) {\n      return;\n    }\n    this.gatherMainDocumentStyles();\n    this.observer = new MutationObserver((mxns) => this._mutationHandler(mxns));\n    this.observer.observe(document, {childList: true, subtree: true});\n  }\n  /**\n  * @param {Array<MutationRecord>} mxns\n  */\n  _mutationHandler(mxns) {\n    for (let i = 0; i < mxns.length; i++) {\n      let mxn = mxns[i];\n      for (let j = 0; j < mxn.addedNodes.length; j++) {\n        let n = mxn.addedNodes[j];\n        if (n.nodeType === Node.ELEMENT_NODE) {\n          if (n.localName === 'style' && !n.hasAttribute('scope')) {\n            this.addCustomStyle(/** @type {!HTMLStyleElement} */(n));\n          } else {\n            forEach(n.querySelectorAll(UNSCOPED_SELECTOR), this.addCustomStyle, this);\n          }\n        }\n      }\n    }\n  }\n}\n\nCustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;\nCustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;\nCustomStyleInterface.prototype['processStyles'] = CustomStyleInterface.prototype.processStyles;\nCustomStyleInterface.prototype['watchMainDocumentStyles'] = CustomStyleInterface.prototype.watchMainDocumentStyles;\n\nObject.defineProperties(CustomStyleInterface.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get() {\n      return transformFn;\n    },\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get() {\n      return validateFn;\n    },\n    /**\n     * @param {?function()} fn\n     * @this {CustomStyleInterface}\n     */\n    set(fn) {\n      let needsEnqueue = false;\n      if (!validateFn) {\n        needsEnqueue = true;\n      }\n      validateFn = fn;\n      if (needsEnqueue) {\n        this.enqueueDocumentValidation();\n      }\n    },\n  }\n});","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport {ApplyShim} from '../src/apply-shim.js';\nimport {templateMap} from '../src/template-map.js';\nimport {getIsExtends, toCssText} from '../src/style-util.js';\nimport * as ApplyShimUtils from '../src/apply-shim-utils.js';\nimport {documentWait} from '../src/document-wait.js';\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {CustomStyleInterface} from '../src/custom-style-interface.js';\nimport {nativeCssVariables, nativeShadow} from '../src/style-settings.js';\n\n/** @const {ApplyShim} */\nconst applyShim = new ApplyShim();\n\nclass ApplyShimInterface {\n  constructor() {\n    /** @type {CustomStyleInterface} */\n    this.customStyleInterface = null;\n    documentWait(() => {\n      this.ensure();\n    });\n    applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n  }\n  ensure() {\n    if (this.customStyleInterface) {\n      return;\n    }\n    this.customStyleInterface = window.ShadyCSS.CustomStyleInterface;\n    this.customStyleInterface['transformCallback'] = (style) => {\n      applyShim.transformCustomStyle(style);\n    };\n    this.customStyleInterface['validateCallback'] = () => {\n      requestAnimationFrame(() => {\n        if (this.customStyleInterface['enqueued']) {\n          this.flushCustomStyles();\n        }\n      });\n    };\n    this.customStyleInterface['watchMainDocumentStyles']();\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplate(template, elementName) {\n    this.ensure();\n    templateMap[elementName] = template;\n    let ast = applyShim.transformTemplate(template, elementName);\n    // save original style ast to use for revalidating instances\n    template['_styleAst'] = ast;\n  }\n  flushCustomStyles() {\n    this.ensure();\n    if (!this.customStyleInterface) {\n      return;\n    }\n    let styles = this.customStyleInterface['processStyles']();\n    if (!this.customStyleInterface['enqueued']) {\n      return;\n    }\n    for (let i = 0; i < styles.length; i++ ) {\n      let cs = styles[i];\n      let style = this.customStyleInterface['getStyleForCustomStyle'](cs);\n      if (style) {\n        applyShim.transformCustomStyle(style);\n      }\n    }\n    this.customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * @param {HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    this.ensure();\n    if (properties) {\n      updateNativeProperties(element, properties);\n    }\n    if (element.shadowRoot) {\n      this.styleElement(element);\n      let shadowChildren = element.shadowRoot.children || element.shadowRoot.childNodes;\n      for (let i = 0; i < shadowChildren.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */(shadowChildren[i]));\n      }\n    } else {\n      let children = element.children || element.childNodes;\n      for (let i = 0; i < children.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */(children[i]));\n      }\n    }\n  }\n  /**\n   * @param {HTMLElement} element\n   */\n  styleElement(element) {\n    this.ensure();\n    let {is} = getIsExtends(element);\n    let template = templateMap[is];\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\n      // only revalidate template once\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this.prepareTemplate(template, is);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update this element instance\n      let root = element.shadowRoot;\n      if (root) {\n        let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));\n        if (style) {\n          // reuse the template's style ast, it has all the original css text\n          style['__cssRules'] = template['_styleAst'];\n          style.textContent = toCssText(template['_styleAst'])\n        }\n      }\n    }\n  }\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.ensure();\n    this.styleSubtree(document.body, properties);\n  }\n}\n\nif (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {\n  const applyShimInterface = new ApplyShimInterface();\n\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate(template, elementName, elementExtends) { // eslint-disable-line no-unused-vars\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.prepareTemplate(template, elementName)\n    },\n\n    /**\n     * @param {!HTMLElement} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleSubtree(element, properties);\n    },\n\n    /**\n     * @param {!HTMLElement} element\n     */\n    styleElement(element) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleElement(element);\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleDocument(properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    CustomStyleInterface: new CustomStyleInterface()\n  };\n}\n\nwindow.ShadyCSS.ApplyShim = applyShim;"]}